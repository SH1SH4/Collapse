Index: cam.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport os\r\nimport sys\r\nimport pytmx\r\nimport pyscroll\r\nfrom pytmx.util_pygame import load_pygame\r\npygame.init()\r\n\r\npygame.display.set_caption(\"Start\")\r\nsize = width, height = 1920, 1020\r\nscreen = pygame.display.set_mode(size)\r\n\r\ncolor = \"white\"\r\n\r\ntmx_data = load_pygame(\"maps/poligon2.0.tmx\")\r\nmap_data = pyscroll.TiledMapData(tmx_data)\r\nscreen_size = (1920, 1020)\r\nmap_layer = pyscroll.BufferedRenderer(map_data, screen_size, True)\r\ngroup = pyscroll.PyscrollGroup(map_layer=map_layer)\r\nobstacles = pygame.sprite.Group()\r\nhero = pygame.sprite.Group()\r\nclass Map:\r\n    def __init__(self, filename, free_tile):\r\n        self.map = pytmx.load_pygame(f\"maps/{filename}\")\r\n        self.height = self.map.height\r\n        self.width = self.map.width\r\n        self.tile_size = self.map.tilewidth\r\n        self.free_tile = free_tile\r\n\r\n    def render(self):\r\n        for y in range(self.height):\r\n            for x in range(self.width):\r\n                image = self.map.get_tile_image(x, y, 0)\r\n                if self.map.tiledgidmap[self.map.get_tile_gid(x, y, 0)] not in self.free_tile:\r\n                    Obstacles(image, x * self.tile_size, y * self.tile_size)\r\n\r\n    def get_tile_id(self, position):\r\n        return self.map.tiledgidmap[self.map.get_tile_gid(*position, 0)]\r\n\r\n    def is_free(self, position):\r\n        return self.get_tile_id(position) not in self.free_tile\r\n\r\n\r\nclass Obstacles(pygame.sprite.Sprite):\r\n    def __init__(self, img, x, y):\r\n        super().__init__(group)\r\n        self.image = img\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x, self.rect.y = x, y\r\n        self.add(obstacles)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n\r\n\r\nclass Button:\r\n    def __init__(self, width, height, inactive=None, active=None):\r\n        self.width = width\r\n        self.height = height\r\n        self.inactive = pygame.image.load(inactive)\r\n        self.active = pygame.image.load(active)\r\n\r\n    def draw(self, x, y, name, action=None):\r\n        mouse = pygame.mouse.get_pos()\r\n        click = pygame.mouse.get_pressed()\r\n        if x < mouse[0] < x + self.width and y < mouse[1] < y + self.height:\r\n            screen.blit(self.active, (x, y))\r\n            if click[0] == 1:\r\n                screen.blit(self.active, (x, y))\r\n                if name == \"play\":\r\n                    start_game()\r\n                    print(\"Ok\")\r\n                if name == \"new_game\":\r\n                    print(\"New game\")\r\n                if name == \"exit\":\r\n                    pygame.quit()\r\n                    quit()\r\n        else:\r\n            screen.blit(self.inactive, (x, y))\r\n\r\n\r\nclass Hero(pygame.sprite.Sprite):\r\n    def __init__(self, position, group):\r\n        pygame.sprite.Sprite.__init__(self, group)\r\n\r\n        self.image = pygame.Surface((32, 32))\r\n        self.image.fill((255, 255, 255))\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x, self.rect.y = position\r\n        self.add(hero)\r\n\r\n    def update(self, world, delta_time):\r\n        key = pygame.key.get_pressed()\r\n        if key[pygame.K_LEFT]:\r\n            self.rect.x -= 5\r\n            if pygame.sprite.spritecollideany(self, obstacles):\r\n                self.rect.x += 5\r\n        if key[pygame.K_RIGHT]:\r\n            self.rect.x += 5\r\n            if pygame.sprite.spritecollideany(self, obstacles):\r\n                self.rect.x -= 5\r\n        if key[pygame.K_UP]:\r\n            self.rect.y -= 5\r\n            if pygame.sprite.spritecollideany(self, obstacles):\r\n                self.rect.y += 5\r\n        if key[pygame.K_DOWN]:\r\n            self.rect.y += 5\r\n            if pygame.sprite.spritecollideany(self, obstacles):\r\n                self.rect.y -= 5\r\n\r\n\r\ndef load_image(name, colorkey=None):\r\n    fullname = os.path.join('data', name)\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(fullname)\r\n    return image\r\n\r\n\r\ndef play_but():\r\n    play = Button(400, 100, \"data/play_inactive.png\", \"data/play_active.png\")\r\n    play.draw(760, 400, \"play\")\r\n\r\n\r\ndef newgame_but():\r\n    new_game = Button(400, 100, \"data/test_inacrive.png\", \"data/test_acrive_black.png\")\r\n    new_game.draw(760, 550, \"new_game\")\r\n\r\n\r\ndef exit_but():\r\n    exit_b = Button(400, 100, \"data/exit_inacrive.png\", \"data/exit_acrive.png\")\r\n    exit_b.draw(760, 700, \"exit\")\r\n\r\n\r\ndef start_screen():\r\n    menu_background = pygame.image.load(\"data/background.png\")\r\n    screen.blit(menu_background, (0, 0))\r\n    clock = pygame.time.Clock()\r\n    run = True\r\n    while run:\r\n        for event in pygame.event.get():\r\n            play_but()\r\n            newgame_but()\r\n            exit_but()\r\n            if event.type == pygame.QUIT:\r\n                run = False\r\n                pygame.quit()\r\n                quit()\r\n        pygame.display.update()\r\n\r\n\r\ndef start_game():\r\n    running = True\r\n    screen.fill((0, 0, 0))\r\n    world = Map(\"poligon2.0.tmx\", [30])\r\n    hero = Hero((50, 50), group)\r\n    # game = Game(world, hero)\r\n    world.render()\r\n    clock = pygame.time.Clock()\r\n    fps = 60\r\n    clock = pygame.time.Clock()\r\n    while running:\r\n        delta_time = clock.tick(fps) / 1000\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n\r\n        group.update(world, delta_time)\r\n        group.center(hero.rect.center)\r\n        group.draw(screen)\r\n        pygame.display.flip()\r\n\r\n    pygame.quit()\r\n\r\nstart_screen()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cam.py	(revision fe3df0d1e6690c29605343f726c141f6ccb1e259)
+++ cam.py	(date 1610139899560)
@@ -1,6 +1,7 @@
 import pygame
 import os
 import sys
+import random
 import pytmx
 import pyscroll
 from pytmx.util_pygame import load_pygame
@@ -12,16 +13,18 @@
 
 color = "white"
 
-tmx_data = load_pygame("maps/poligon2.0.tmx")
+tmx_data = load_pygame("data/map.tmx")
 map_data = pyscroll.TiledMapData(tmx_data)
 screen_size = (1920, 1020)
 map_layer = pyscroll.BufferedRenderer(map_data, screen_size, True)
 group = pyscroll.PyscrollGroup(map_layer=map_layer)
 obstacles = pygame.sprite.Group()
 hero = pygame.sprite.Group()
+
+
 class Map:
     def __init__(self, filename, free_tile):
-        self.map = pytmx.load_pygame(f"maps/{filename}")
+        self.map = pytmx.load_pygame(f"data/{filename}")
         self.height = self.map.height
         self.width = self.map.width
         self.tile_size = self.map.tilewidth
@@ -79,8 +82,8 @@
 
 class Hero(pygame.sprite.Sprite):
     def __init__(self, position, group):
+        self.speed = 6
         pygame.sprite.Sprite.__init__(self, group)
-
         self.image = pygame.Surface((32, 32))
         self.image.fill((255, 255, 255))
         self.rect = self.image.get_rect()
@@ -90,21 +93,30 @@
     def update(self, world, delta_time):
         key = pygame.key.get_pressed()
         if key[pygame.K_LEFT]:
-            self.rect.x -= 5
+            self.rect.x -= self.speed
             if pygame.sprite.spritecollideany(self, obstacles):
-                self.rect.x += 5
+                self.rect.x += self.speed
         if key[pygame.K_RIGHT]:
-            self.rect.x += 5
+            self.rect.x += self.speed
             if pygame.sprite.spritecollideany(self, obstacles):
-                self.rect.x -= 5
+                self.rect.x -= self.speed
         if key[pygame.K_UP]:
-            self.rect.y -= 5
+            self.rect.y -= self.speed
             if pygame.sprite.spritecollideany(self, obstacles):
-                self.rect.y += 5
+                self.rect.y += self.speed
         if key[pygame.K_DOWN]:
-            self.rect.y += 5
+            self.rect.y += self.speed
             if pygame.sprite.spritecollideany(self, obstacles):
-                self.rect.y -= 5
+                self.rect.y -= self.speed
+
+
+class Enemy(pygame.sprite.Sprite):
+    def __init__(self, position):
+        self.image = pygame.Surface((32, 32))
+        self.image.fill((255, 0, 0))
+        self.rect = self.image.get_rect()
+        self.rect.x, self.rect.y = position
+        self.add(enemy)
 
 
 def load_image(name, colorkey=None):
@@ -151,13 +163,11 @@
 def start_game():
     running = True
     screen.fill((0, 0, 0))
-    world = Map("poligon2.0.tmx", [30])
+    world = Map("map.tmx", [178])
     hero = Hero((50, 50), group)
-    # game = Game(world, hero)
     world.render()
     clock = pygame.time.Clock()
     fps = 60
-    clock = pygame.time.Clock()
     while running:
         delta_time = clock.tick(fps) / 1000
         for event in pygame.event.get():
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision fe3df0d1e6690c29605343f726c141f6ccb1e259)
+++ .idea/misc.xml	(date 1610064488808)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (Collapse)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/CovidInRussia.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/CovidInRussia.iml	(revision fe3df0d1e6690c29605343f726c141f6ccb1e259)
+++ .idea/CovidInRussia.iml	(date 1610064488774)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
